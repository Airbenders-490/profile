// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/airbenders/profile/domain"
	mock "github.com/stretchr/testify/mock"
)

// StudentRepository is an autogenerated mock type for the StudentRepository type
type StudentRepositoryMock struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, id, st
func (_m *StudentRepositoryMock) Create(ctx context.Context, id string, st *domain.Student) error {
	ret := _m.Called(ctx, id, st)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.Student) error); ok {
		r0 = rf(ctx, id, st)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, id
func (_m *StudentRepositoryMock) Delete(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *StudentRepositoryMock) GetByID(ctx context.Context, id string) (*domain.Student, error) {
	ret := _m.Called(ctx, id)

	var r0 *domain.Student
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Student); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Student)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchCurrentClass provides a mock function with given fields: ctx, class
func (_m *StudentRepositoryMock) SearchCurrentClass(ctx context.Context, class string) ([]domain.Student, error) {
	ret := _m.Called(ctx, class)

	var r0 []domain.Student
	if rf, ok := ret.Get(0).(func(context.Context, string) []domain.Student); ok {
		r0 = rf(ctx, class)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Student)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, class)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchStudents provides a mock function with given fields: ctx, st
func (_m *StudentRepositoryMock) SearchStudents(ctx context.Context, st *domain.Student) ([]domain.Student, error) {
	ret := _m.Called(ctx, st)

	var r0 []domain.Student
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Student) []domain.Student); ok {
		r0 = rf(ctx, st)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Student)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.Student) error); ok {
		r1 = rf(ctx, st)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, st
func (_m *StudentRepositoryMock) Update(ctx context.Context, st *domain.Student) error {
	ret := _m.Called(ctx, st)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Student) error); ok {
		r0 = rf(ctx, st)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateClasses provides a mock function with given fields: ctx, st
func (_m *StudentRepositoryMock) UpdateClasses(ctx context.Context, st *domain.Student) error {
	ret := _m.Called(ctx, st)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Student) error); ok {
		r0 = rf(ctx, st)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
